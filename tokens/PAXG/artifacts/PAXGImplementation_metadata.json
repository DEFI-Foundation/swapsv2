{
	"compiler": {
		"version": "0.4.24+commit.e67f0147"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"constant": false,
				"inputs": [],
				"name": "disregardProposeOwner",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"name": "",
						"type": "string"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "reclaimPAXG",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_spender",
						"type": "address"
					},
					{
						"name": "_value",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "assetProtectionRole",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "_value",
						"type": "uint256"
					}
				],
				"name": "getFeeFor",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "r",
						"type": "bytes32[]"
					},
					{
						"name": "s",
						"type": "bytes32[]"
					},
					{
						"name": "v",
						"type": "uint8[]"
					},
					{
						"name": "to",
						"type": "address[]"
					},
					{
						"name": "value",
						"type": "uint256[]"
					},
					{
						"name": "serviceFee",
						"type": "uint256[]"
					},
					{
						"name": "seq",
						"type": "uint256[]"
					},
					{
						"name": "deadline",
						"type": "uint256[]"
					}
				],
				"name": "betaDelegatedTransferBatch",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "sig",
						"type": "bytes"
					},
					{
						"name": "to",
						"type": "address"
					},
					{
						"name": "value",
						"type": "uint256"
					},
					{
						"name": "serviceFee",
						"type": "uint256"
					},
					{
						"name": "seq",
						"type": "uint256"
					},
					{
						"name": "deadline",
						"type": "uint256"
					}
				],
				"name": "betaDelegatedTransfer",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_from",
						"type": "address"
					},
					{
						"name": "_to",
						"type": "address"
					},
					{
						"name": "_value",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "initializeDomainSeparator",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "decimals",
				"outputs": [
					{
						"name": "",
						"type": "uint8"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_newFeeController",
						"type": "address"
					}
				],
				"name": "setFeeController",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "unpause",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_newFeeRate",
						"type": "uint256"
					}
				],
				"name": "setFeeRate",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_addr",
						"type": "address"
					}
				],
				"name": "unfreeze",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "feeRecipient",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "claimOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_newSupplyController",
						"type": "address"
					}
				],
				"name": "setSupplyController",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "feeParts",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "paused",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "feeController",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "_addr",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "initialize",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "pause",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "target",
						"type": "address"
					}
				],
				"name": "nextSeqOf",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_newAssetProtectionRole",
						"type": "address"
					}
				],
				"name": "setAssetProtectionRole",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_addr",
						"type": "address"
					}
				],
				"name": "freeze",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"name": "",
						"type": "string"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "feeRate",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_newWhitelister",
						"type": "address"
					}
				],
				"name": "setBetaDelegateWhitelister",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_value",
						"type": "uint256"
					}
				],
				"name": "decreaseSupply",
				"outputs": [
					{
						"name": "success",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "_addr",
						"type": "address"
					}
				],
				"name": "isWhitelistedBetaDelegate",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_to",
						"type": "address"
					},
					{
						"name": "_value",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_addr",
						"type": "address"
					}
				],
				"name": "whitelistBetaDelegate",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_proposedOwner",
						"type": "address"
					}
				],
				"name": "proposeOwner",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_value",
						"type": "uint256"
					}
				],
				"name": "increaseSupply",
				"outputs": [
					{
						"name": "success",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "betaDelegateWhitelister",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "feeDecimals",
				"outputs": [
					{
						"name": "",
						"type": "uint8"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "proposedOwner",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_addr",
						"type": "address"
					}
				],
				"name": "unwhitelistBetaDelegate",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "_owner",
						"type": "address"
					},
					{
						"name": "_spender",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_addr",
						"type": "address"
					}
				],
				"name": "wipeFrozenAddress",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "EIP712_DOMAIN_HASH",
				"outputs": [
					{
						"name": "",
						"type": "bytes32"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "_addr",
						"type": "address"
					}
				],
				"name": "isFrozen",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_newFeeRecipient",
						"type": "address"
					}
				],
				"name": "setFeeRecipient",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "supplyController",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "currentOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "proposedOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferProposed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "oldProposedOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferDisregarded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "oldOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "Pause",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "Unpause",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "addr",
						"type": "address"
					}
				],
				"name": "AddressFrozen",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "addr",
						"type": "address"
					}
				],
				"name": "AddressUnfrozen",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "addr",
						"type": "address"
					}
				],
				"name": "FrozenAddressWiped",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "oldAssetProtectionRole",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "newAssetProtectionRole",
						"type": "address"
					}
				],
				"name": "AssetProtectionRoleSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "SupplyIncreased",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "from",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "SupplyDecreased",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "oldSupplyController",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "newSupplyController",
						"type": "address"
					}
				],
				"name": "SupplyControllerSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "value",
						"type": "uint256"
					},
					{
						"indexed": false,
						"name": "seq",
						"type": "uint256"
					},
					{
						"indexed": false,
						"name": "serviceFee",
						"type": "uint256"
					}
				],
				"name": "BetaDelegatedTransfer",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "oldWhitelister",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "newWhitelister",
						"type": "address"
					}
				],
				"name": "BetaDelegateWhitelisterSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "newDelegate",
						"type": "address"
					}
				],
				"name": "BetaDelegateWhitelisted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "oldDelegate",
						"type": "address"
					}
				],
				"name": "BetaDelegateUnwhitelisted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "FeeCollected",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "oldFeeRate",
						"type": "uint256"
					},
					{
						"indexed": true,
						"name": "newFeeRate",
						"type": "uint256"
					}
				],
				"name": "FeeRateSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "oldFeeController",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "newFeeController",
						"type": "address"
					}
				],
				"name": "FeeControllerSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "oldFeeRecipient",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "newFeeRecipient",
						"type": "address"
					}
				],
				"name": "FeeRecipientSet",
				"type": "event"
			}
		],
		"devdoc": {
			"methods": {
				"allowance(address,address)": {
					"details": "Function to check the amount of tokens that an owner allowed to a spender.\r",
					"params": {
						"_owner": "address The address which owns the funds.\r",
						"_spender": "address The address which will spend the funds.\r"
					},
					"return": "A uint256 specifying the amount of tokens still available for the spender.\r"
				},
				"approve(address,uint256)": {
					"details": "Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r Beware that changing an allowance with this method brings the risk that someone may use both the old\r and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r",
					"params": {
						"_spender": "The address which will spend the funds.\r",
						"_value": "The amount of tokens to be spent.\r"
					}
				},
				"balanceOf(address)": {
					"details": "Gets the balance of the specified address.\r",
					"params": {
						"_addr": "The address to query the the balance of.\r"
					},
					"return": "An uint256 representing the amount owned by the passed address.\r"
				},
				"betaDelegatedTransfer(bytes,address,uint256,uint256,uint256,uint256)": {
					"details": "Performs a transfer on behalf of the from address, identified by its signature on the delegatedTransfer msg.\r Splits a signature byte array into r,s,v for convenience.\r",
					"params": {
						"deadline": "a block number after which the pre-signed transaction has expired.\r",
						"seq": "a sequencing number included by the from address specific to this contract to protect from replays.\r",
						"serviceFee": "an optional ERC20 service fee paid to the executor of betaDelegatedTransfer by the from address.\r",
						"sig": "the signature of the delgatedTransfer msg.\r",
						"to": "The address to transfer to.\r",
						"value": "The amount to be transferred.\r"
					},
					"return": "A boolean that indicates if the operation was successful.\r"
				},
				"betaDelegatedTransferBatch(bytes32[],bytes32[],uint8[],address[],uint256[],uint256[],uint256[],uint256[])": {
					"details": "Performs an atomic batch of transfers on behalf of the from addresses, identified by their signatures.\r Lack of nested array support in arguments requires all arguments to be passed as equal size arrays where\r delegated transfer number i is the combination of all arguments at index i\r",
					"params": {
						"deadline": "block numbers after which the pre-signed transactions have expired.\r",
						"r": "the r signatures of the delgatedTransfer msg.\r",
						"s": "the s signatures of the delgatedTransfer msg.\r",
						"seq": "sequencing numbers included by the from address specific to this contract to protect from replays.\r",
						"serviceFee": "optional ERC20 service fees paid to the delegate of betaDelegatedTransfer by the from address.\r",
						"to": "The addresses to transfer to.\r",
						"v": "the v signatures of the delgatedTransfer msg.\r",
						"value": "The amounts to be transferred.\r"
					},
					"return": "A boolean that indicates if the operation was successful.\r"
				},
				"claimOwnership()": {
					"details": "Allows the proposed owner to complete transferring control of the contract to the proposedOwner.\r"
				},
				"decreaseSupply(uint256)": {
					"details": "Decreases the total supply by burning the specified number of tokens from the supply controller account.\r",
					"params": {
						"_value": "The number of tokens to remove.\r"
					},
					"return": "A boolean that indicates if the operation was successful.\r"
				},
				"disregardProposeOwner()": {
					"details": "Allows the current owner or proposed owner to cancel transferring control of the contract to a proposedOwner\r"
				},
				"freeze(address)": {
					"details": "Freezes an address balance from being transferred.\r",
					"params": {
						"_addr": "The new address to freeze.\r"
					}
				},
				"getFeeFor(uint256)": {
					"details": "Gets a fee for a given value\r ex: given feeRate = 200 and feeParts = 1,000,000 then getFeeFor(10000) = 2\r",
					"params": {
						"_value": "The amount to get the fee for.\r"
					}
				},
				"increaseSupply(uint256)": {
					"details": "Increases the total supply by minting the specified number of tokens to the supply controller account.\r",
					"params": {
						"_value": "The number of tokens to add.\r"
					},
					"return": "A boolean that indicates if the operation was successful.\r"
				},
				"initialize()": {
					"details": "sets 0 initial tokens, the owner, the supplyController,\r the fee controller and fee recipient.\r this serves as the constructor for the proxy but compiles to the\r memory model of the Implementation contract.\r"
				},
				"initializeDomainSeparator()": {
					"details": "To be called when upgrading the contract using upgradeAndCall to add delegated transfers\r"
				},
				"isFrozen(address)": {
					"details": "Gets whether the address is currently frozen.\r",
					"params": {
						"_addr": "The address to check if frozen.\r"
					},
					"return": "A bool representing whether the given address is frozen.\r"
				},
				"isWhitelistedBetaDelegate(address)": {
					"details": "Gets whether the address is currently whitelisted for betaDelegateTransfer.\r",
					"params": {
						"_addr": "The address to check if whitelisted.\r"
					},
					"return": "A bool representing whether the given address is whitelisted.\r"
				},
				"nextSeqOf(address)": {
					"details": "returns the next seq for a target address.\r The transactor must submit nextSeqOf(transactor) in the next transaction for it to be valid.\r Note: that the seq context is specific to this smart contract.\r",
					"params": {
						"target": "The target address.\r"
					},
					"return": "the seq.\r"
				},
				"pause()": {
					"details": "called by the owner to pause, triggers stopped state\r"
				},
				"proposeOwner(address)": {
					"details": "Allows the current owner to begin transferring control of the contract to a proposedOwner\r",
					"params": {
						"_proposedOwner": "The address to transfer ownership to.\r"
					}
				},
				"reclaimPAXG()": {
					"details": "Reclaim all PAXG at the contract address.\r This sends the PAXG tokens that this contract add holding to the owner.\r Note: this is not affected by freeze constraints.\r"
				},
				"setAssetProtectionRole(address)": {
					"details": "Sets a new asset protection role address.\r",
					"params": {
						"_newAssetProtectionRole": "The new address allowed to freeze/unfreeze addresses and seize their tokens.\r"
					}
				},
				"setBetaDelegateWhitelister(address)": {
					"details": "Sets a new betaDelegate whitelister.\r",
					"params": {
						"_newWhitelister": "The address allowed to whitelist betaDelegates.\r"
					}
				},
				"setFeeController(address)": {
					"details": "Sets a new fee controller address.\r",
					"params": {
						"_newFeeController": "The address allowed to set the fee rate and the fee recipient.\r"
					}
				},
				"setFeeRate(uint256)": {
					"details": "Sets a new fee rate.\r",
					"params": {
						"_newFeeRate": "The new fee rate to collect as transfer fees for transfers.\r"
					}
				},
				"setFeeRecipient(address)": {
					"details": "Sets a new fee recipient address.\r",
					"params": {
						"_newFeeRecipient": "The address allowed to collect transfer fees for transfers.\r"
					}
				},
				"setSupplyController(address)": {
					"details": "Sets a new supply controller address.\r",
					"params": {
						"_newSupplyController": "The address allowed to burn/mint tokens to control supply.\r"
					}
				},
				"totalSupply()": {
					"details": "Total number of tokens in existence\r"
				},
				"transfer(address,uint256)": {
					"details": "Transfer token to a specified address from msg.sender\r Transfer additionally sends the fee to the fee controller\r Note: the use of Safemath ensures that _value is nonnegative.\r",
					"params": {
						"_to": "The address to transfer to.\r",
						"_value": "The amount to be transferred.\r"
					}
				},
				"transferFrom(address,address,uint256)": {
					"details": "Transfer tokens from one address to another\r",
					"params": {
						"_from": "address The address which you want to send tokens from\r",
						"_to": "address The address which you want to transfer to\r",
						"_value": "uint256 the amount of tokens to be transferred\r"
					}
				},
				"unfreeze(address)": {
					"details": "Unfreezes an address balance allowing transfer.\r",
					"params": {
						"_addr": "The new address to unfreeze.\r"
					}
				},
				"unpause()": {
					"details": "called by the owner to unpause, returns to normal state\r"
				},
				"unwhitelistBetaDelegate(address)": {
					"details": "Unwhitelists an address to disallow calling BetaDelegatedTransfer.\r",
					"params": {
						"_addr": "The new address to whitelist.\r"
					}
				},
				"whitelistBetaDelegate(address)": {
					"details": "Whitelists an address to allow calling BetaDelegatedTransfer.\r",
					"params": {
						"_addr": "The new address to whitelist.\r"
					}
				},
				"wipeFrozenAddress(address)": {
					"details": "Wipes the balance of a frozen address, burning the tokens\r and setting the approval to zero.\r",
					"params": {
						"_addr": "The new frozen address to wipe.\r"
					}
				}
			},
			"title": "PAXGImplementation\r"
		},
		"userdoc": {
			"methods": {}
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/tokens/PAXG/PAXGImplementation.sol": "PAXGImplementation"
		},
		"evmVersion": "byzantium",
		"libraries": {},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/tokens/PAXG/PAXGImplementation.sol": {
			"keccak256": "0xc0a99e784f40c754bb13cd8bf849bff3db7dd51c0e526d5d6ae4d02acdc71a9a",
			"urls": [
				"bzzr://7f251d5341006c5e367bdf5add486c47062da9f0f99a480dddb0ce722cfc0d35"
			]
		}
	},
	"version": 1
}